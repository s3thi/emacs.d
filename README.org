#+TITLE: Emacs Configuration
#+AUTHOR: Ankur Sethi <contact@ankursethi.in>

* Things to do

- Fix indentation of lists in Markdown mode.
- Is it possible to make Markdown mode behave like org-mode in terms of
  indenting text nested under headings?
- Use =yankpad= instead of =yasnippet=.

* Paperwork

File header.

#+BEGIN_SRC emacs-lisp
  ;;; README.el --- Literate configuration for Emacs -*- lexical-binding: t -*-

  ;;; Commentary:
  ;; My personal initialization file for Emacs.

  ;;; Code:
#+END_SRC

Set encoding to UTF-8.

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

Personal information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ankur Sethi"
        user-mail-address "contact@ankursethi.in")
#+END_SRC

Platform specific variables.

#+BEGIN_SRC emacs-lisp
  (defvar s3thi/is-a-mac (eq system-type 'darwin))
  (defvar s3thi/is-a-pc (eq system-type 'windows-nt))
  (defvar s3thi/is-a-penguin (eq system-type 'gnu/linux))
#+END_SRC

* User Interface

*** General UI Enhancements

Remove UI elements we don't like.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

And add UI elements that are nice to have.

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (show-paren-mode)
  (setq confirm-kill-emacs #'yes-or-no-p)
  (winner-mode 1)
#+END_SRC

Set a nice font. The font size will have to be different across platforms, so we
check the OS we're running on before setting it.

#+BEGIN_SRC emacs-lisp
  (when s3thi/is-a-mac
    (set-frame-font "Berkeley Mono 15" nil t))
#+END_SRC

Maximize the Emacs frame on startup. To start every new frame maximized instead
of just the first frame, you can add the following options to
=default-frame-alist= instead of =initial-frame-alist=. Additionally, it's
possible to toggle the maximized status of an Emacs frame by calling
=toggle-frame-maximized=, which is bound to =M-<f10>= by default.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

=scroll-conservatively= specifies the number of lines to scroll the buffer in
order to bring the cursor back on the screen when it moves off-screen. If moving
that much doesn't bring the cursor back, Emacs will scroll the buffer by as many
lines as it takes to bring the cursor to the exact center of the screen.

This behavior is irritating and jarring, causing huge jumps as you move around a
file. Luckily, setting this variable to a number larger than 100 tells Emacs to
/never/ scroll by large amounts, and instead scroll the screen /just enough/ to
keep the cursor visible.

In summary, setting =scroll-conservatively= to 101 will make Emacs behave like
every other text editor on the planet.

#+BEGIN_SRC emacs-lisp
    (setq scroll-conservatively 101)
#+END_SRC

=scroll-margin= specifies the number of lines of margin at the top or bottom of
the window. As soon as the cursor gets closer than this to the top of or bottom
of a window, Emacs will start scrolling.

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 5)
#+END_SRC

Show total number of matches while searching:

#+BEGIN_SRC emacs-lisp
  (setq-default isearch-lazy-count t)
#+END_SRC

*** Minibuffer Completion

Use =vertico= as the completion UI. Also add some recommended configuration from
the =vertico= documentation.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+END_SRC

Use =savehist= to save minibuffer history.

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+END_SRC

Use =orderless= to filter completions.

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

Enable annotations in the minibuffer using =marginalia=.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :ensure t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+END_SRC

=which-key= displays helpful suggestions in the minibuffer when you hit the
first part of a long keychord.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode 1))
#+END_SRC

=diminish= prevents the modeline from getting polluted when too many modes are
enabled for a single buffer. This conveniently integrates with use-package.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp
  (setq modus-themes-org-blocks 'gray-background)
  (load-theme 'modus-operandi t)
#+END_SRC

* Files and Directories

Store configuration created by custom in a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+END_SRC

Don't create garbage files.

#+BEGIN_SRC emacs-lisp
  (setq-default create-lockfiles nil)
  (setq-default make-backup-files nil)
#+END_SRC

Turn on =auto-revert-mode= for all files. This will automatically reload files
from disk every time they're changed by another from outside Emacs.

Also ensure that Dired buffers are reloaded on each visit, and that version
control information is checked periodically to ensure that we're showing the
correct VCS information in our modeline.

#+BEGIN_SRC emacs-lisp
  (setq dired-auto-revert-buffer t)
  (setq auto-revert-check-vc-info t)
  (global-auto-revert-mode 1)
#+END_SRC

Save place in files.

#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC

If a read-only file is opened, use =view-mode= instead of the regular mode. This
ensures you can't accidentally change or overwrite the file.

#+BEGIN_SRC emacs-lisp
  (setq view-read-only t)
#+END_SRC

* Text Editing

Enable useful text editing commands that are disabled by default.

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'scroll-left 'disabled nil)
#+END_SRC

Make sure sentences end with single spaces, not double spaces. This makes
functions that operate on prose behave better (such as those in =org-mode= and
=markdown-mode=).

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

Always use spaces for indentation. Affects all modes, unless we override it
later. The only programming language I've used that mandates the use of tabs
rather than spaces is Go, so it's safe to set this here and override it for Go
if I ever write it again.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

In modes where we are forced to use tabs, set the tab width to 4.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Set =fill-column=.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 72)
#+END_SRC

If there is some text already present in the system clipboard when we
run an Emacs command that kills text, make sure that is preserved by
pushing it into the kill ring.

Since we've configured Emacs to put text into the system clipboard -- in
addition to the kill ring -- when we kill it, this setting ensures that
we never lose whatever might have already been in the clipboard when we
perform a kill operation. Not always useful, but a nice to have.

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

Make word movement commands take CamelCase words into account. Also make sure we
diminish this, otherwise it shows up as an irritating little comma in the
modeline.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'subword
    (diminish 'subword-mode))
  (global-subword-mode 1)
#+END_SRC

Use =visual-fill-column= to give us the same word-wrapping experience as a
regular text editor inside Emacs.

#+BEGIN_SRC emacs-lisp
    (defun s3thi/center-and-fill ()
      (interactive)
      (if (and (boundp 'visual-fill-column-mode) visual-fill-column-mode)
          (progn
            (setq visual-fill-column-center-text nil)
            (visual-fill-column-mode 0))
        (progn
          (setq visual-fill-column-center-text t)
          (visual-fill-column-mode))))

    (use-package visual-fill-column
      :ensure t
      :bind (("C-c f" . #'visual-fill-column-mode)
             ("C-c c" . #'s3thi/center-and-fill))
      :init
      ;; Let the column width be a bit more than fill-column. Otherwise things
      ;; look odd.
      (setq visual-fill-column-width (+ fill-column 4))
      (setq visual-fill-column-enable-sensible-window-split t)
      :config
      (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))
#+END_SRC

Snippets using =yasnippet=.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (global-set-key (kbd "C-c y") #'yas-expand))
#+END_SRC

Define a type scale that we'll use later.

#+BEGIN_SRC emacs-lisp
  (defvar s3thi/type-scale-document-title 2.02725)
  (defvar s3thi/type-scale-level-1 1.802)
  (defvar s3thi/type-scale-level-2 1.602)
  (defvar s3thi/type-scale-level-3 1.424)
  (defvar s3thi/type-scale-level-4 1.266)
  (defvar s3thi/type-scale-level-5 1.125)
  (defvar s3thi/type-scale-level-6 1)
#+END_SRC

Define line spacing that we'll use later, and a function we can use
for hooks.

#+BEGIN_SRC emacs-lisp
  (defvar s3thi/prose-line-spacing 0.125)

  (defun s3thi/set-prose-line-spacing ()
    (setq line-spacing s3thi/prose-line-spacing))
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . flyspell-mode)
           (org-mode . s3thi/set-prose-line-spacing))
    :init
    (setq org-startup-indented t)
    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
    (setq org-yank-adjusted-subtrees t)
    (setq org-catch-invisible-edits 'error)
    :config
    (set-face-attribute 'org-document-title nil :height s3thi/type-scale-document-title)
    (set-face-attribute 'org-level-1 nil :height s3thi/type-scale-level-1)
    (set-face-attribute 'org-level-2 nil :height s3thi/type-scale-level-2)
    (set-face-attribute 'org-level-3 nil :height s3thi/type-scale-level-3)
    (set-face-attribute 'org-level-4 nil :height s3thi/type-scale-level-4)
    (set-face-attribute 'org-level-5 nil :height s3thi/type-scale-level-5)
    (set-face-attribute 'org-level-6 nil :height s3thi/type-scale-level-6))
#+END_SRC

* Version Control

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

* Key Bindings

Disable C-z to suspend in GUI Emacs. By default, hitting C-z in GUI Emacs will
minimize the editor, which is very annoying. This disables that behavior. On
terminal Emacs, this will still allow us to suspend the editor and go back to
our shell.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-unset-key (kbd "C-z")))
#+END_SRC

Good ol' ==ibuffer==.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
#+END_SRC

Make it slightly easier to quickly switch between windows.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") #'other-window)
#+END_SRC

* Everything Else

#+BEGIN_SRC emacs-lisp
  ;; Markdown.
  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :hook ((markdown-mode . visual-line-mode)
           (markdown-mode . flyspell-mode)
           (markdown-mode . s3thi/set-prose-line-spacing))
    :config
    (set-face-attribute 'markdown-header-face-1 nil :height s3thi/type-scale-level-1)
    (set-face-attribute 'markdown-header-face-2 nil :height s3thi/type-scale-level-2)
    (set-face-attribute 'markdown-header-face-3 nil :height s3thi/type-scale-level-3)
    (set-face-attribute 'markdown-header-face-4 nil :height s3thi/type-scale-level-4)
    (set-face-attribute 'markdown-header-face-5 nil :height s3thi/type-scale-level-5)
    (set-face-attribute 'markdown-header-face-6 nil :height s3thi/type-scale-level-6))

  ;; Ripgrep for searching.
  (use-package rg
    :ensure t
    :config
    (rg-enable-default-bindings))

  ;; A ton of useful functions.
  (use-package crux
    :ensure t
    :bind (("C-c d" . #'crux-duplicate-current-line-or-region)
           ("C-c D" . #'crux-delete-file-and-buffer)
           ("C-c r" . #'crux-rename-file-and-buffer)))

  ;; A visual undo tree.
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-history-directory-alist
          `(("." . ,(concat user-emacs-directory "undo-tree/")))))

  ;; Browse kill ring.
  (use-package browse-kill-ring
    :ensure t)

  ;; Start server.
  (server-start)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; README.el ends here.
#+END_SRC
