#+TITLE: Emacs Configuration
#+AUTHOR: Ankur Sethi <contact@ankursethi.in>

* Paperwork

File header.

#+BEGIN_SRC emacs-lisp
  ;;; README.el --- Literate configuration for Emacs -*- lexical-binding: t -*-

  ;;; Commentary:
  ;; My personal initialization file for Emacs.

  ;;; Code:
#+END_SRC

Set encoding to UTF-8.

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

Personal information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ankur Sethi"
        user-mail-address "contact@ankursethi.in")
#+END_SRC

Platform specific variables.

#+BEGIN_SRC emacs-lisp
  (defvar s3thi--is-a-mac (eq system-type 'darwin))
  (defvar s3thi--is-a-pc (eq system-type 'windows-nt))
  (defvar s3thi--is-a-penguin (eq system-type 'gnu/linux))
#+END_SRC

* User Interface

** General UI Enhancements

Remove UI elements we don't like.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

And add UI elements that are nice to have.

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (show-paren-mode)
  (setq confirm-kill-emacs #'yes-or-no-p)
  (winner-mode 1)
#+END_SRC

Enable smooth scrolling.

#+BEGIN_SRC emacs-lisp
  (pixel-scroll-precision-mode 1)
#+END_SRC

Set a nice font. The font size will have to be different across
platforms, so we check the OS we're running on before setting it.

#+BEGIN_SRC emacs-lisp
  (when s3thi--is-a-mac
    (set-frame-font "Berkeley Mono 15" nil t))
#+END_SRC

Maximize the Emacs frame on startup. To start every new frame maximized
instead of just the first frame, you can add the following options to
=default-frame-alist= instead of =initial-frame-alist=. Additionally,
it's possible to toggle the maximized status of an Emacs frame by
calling =toggle-frame-maximized=, which is bound to =M-<f10>= by
default.

Currently disabled because I prefer to resize my Emacs manually, like
some kind of a Neanderthal.

#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

=scroll-conservatively= specifies the number of lines to scroll the
buffer in order to bring the cursor back on the screen when it moves
off-screen. If moving that much doesn't bring the cursor back, Emacs
will scroll the buffer by as many lines as it takes to bring the cursor
to the exact center of the screen.

This behavior is irritating and jarring, causing huge jumps as you move
around a file. Luckily, setting this variable to a number larger than
100 tells Emacs to /never/ scroll by large amounts, and instead scroll
the screen /just enough/ to keep the cursor visible.

In summary, setting =scroll-conservatively= to 101 will make Emacs
behave like every other text editor on the planet.

#+BEGIN_SRC emacs-lisp
    (setq scroll-conservatively 101)
#+END_SRC

=scroll-margin= specifies the number of lines of margin at the top or
bottom of the window. As soon as the cursor gets closer than this to the
top of or bottom of a window, Emacs will start scrolling.

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 3)
#+END_SRC

Show total number of matches while searching:

#+BEGIN_SRC emacs-lisp
  (setq-default isearch-lazy-count t)
#+END_SRC

=undo-tree= lets me browse the Emacs undo history visually.

#+BEGIN_SRC emacs-lisp

  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-history-directory-alist
          `(("." . ,(concat user-emacs-directory "undo-tree/")))))
#+END_SRC

=browse-kill-ring= lets me browse the kill ring visually.

#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t)
#+END_SRC

=which-key= displays helpful suggestions in the minibuffer when you hit
the first part of a long keychord.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode 1))
#+END_SRC

=diminish= prevents the modeline from getting polluted when too many
modes are enabled for a single buffer. This conveniently integrates with
use-package.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

** Minibuffer Completion

Use =vertico= as the completion UI.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+END_SRC

Use =savehist= to save minibuffer history.

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+END_SRC

Use =orderless= to filter completions.

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

Enable annotations in the minibuffer using =marginalia=.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :ensure t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+END_SRC

** Themes

Install the =gruvbox= set of themes.

#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t)
#+END_SRC

Add the ability to toggle between light and dark themes. Instead of
setting the theme on Emacs startup, just call the cycle theme function
to pick up the first theme from this list.

#+BEGIN_SRC emacs-lisp
  (defvar s3thi--favorite-themes
    '(gruvbox-light-soft gruvbox-dark-soft))

  (defun s3thi--current-theme ()
      (car custom-enabled-themes))

  (defun s3thi--next-theme-index ()
    (let ((current (cl-position
                    (s3thi--current-theme)
                    s3thi--favorite-themes)))
      (if (eq nil current)
          0
        (% (+ current 1) (length s3thi--favorite-themes)))))

  (defun s3thi--cycle-theme ()
    (interactive)
    (let ((next (nth
                 (s3thi--next-theme-index)
                 s3thi--favorite-themes)))
      (disable-theme (s3thi--current-theme))
      (load-theme next t)))

  (global-set-key (kbd "C-c t") #'s3thi--cycle-theme)

  (s3thi--cycle-theme)
#+END_SRC

Settings for the included =modus= themes.

#+BEGIN_SRC emacs-lisp
  (setq modus-themes-org-blocks 'gray-background)
#+END_SRC

* Files and Directories

Store configuration created by custom in a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+END_SRC

Don't create garbage files.

#+BEGIN_SRC emacs-lisp
  (setq-default create-lockfiles nil)
  (setq-default make-backup-files nil)
#+END_SRC

Turn on =auto-revert-mode= for all files. This will automatically reload
files from disk every time they're changed by another from outside
Emacs.

Also ensure that Dired buffers are reloaded on each visit, and that
version control information is checked periodically to ensure that we're
showing the correct VCS information in our modeline.

#+BEGIN_SRC emacs-lisp
  (setq dired-auto-revert-buffer t)
  (setq auto-revert-check-vc-info t)
  (global-auto-revert-mode 1)
#+END_SRC

Save place in files.

#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC

If a read-only file is opened, use =view-mode= instead of the regular
mode. This ensures you can't accidentally change or overwrite the file.

#+BEGIN_SRC emacs-lisp
  (setq view-read-only t)
#+END_SRC

Use =ripgrep= for searching.

#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure t
    :config
    (rg-enable-default-bindings))
#+END_SRC

* Text Editing

Enable useful text editing commands that are disabled by default.

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'scroll-left 'disabled nil)
#+END_SRC

Make sure sentences end with single spaces, not double spaces. This
makes functions that operate on prose behave better (such as those in
=org-mode= and =markdown-mode=).

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

Always use spaces for indentation. Affects all modes, unless we override
it later. The only programming language I've used that mandates the use
of tabs rather than spaces is Go, so it's safe to set this here and
override it for Go if I ever write it again.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

In modes where we are forced to use tabs, set the tab width to 4.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Set =fill-column= manually, to make sure it's always what I expect. The
default of 70 is good enough for me.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 70)
#+END_SRC

If there is some text already present in the system clipboard when we
run an Emacs command that kills text, make sure that is preserved by
pushing it into the kill ring.

Since we've configured Emacs to put text into the system clipboard -- in
addition to the kill ring -- when we kill it, this setting ensures that
we never lose whatever might have already been in the clipboard when we
perform a kill operation. Not always useful, but a nice to have.

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

Make word movement commands take CamelCase words into account. Also make
sure we diminish this, otherwise it shows up as an irritating little
comma in the modeline.

#+BEGIN_SRC emacs-lisp
  (use-package subword
    :diminish
    :config
    (global-subword-mode 1))
#+END_SRC

Use =visual-fill-column= to give us the same word-wrapping experience as
a regular text editor inside Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :init
    ;; Let the column width be a bit more than fill-column. Otherwise
    ;; things look odd.
    (setq visual-fill-column-width (+ fill-column 4))
    (setq visual-fill-column-enable-sensible-window-split t)
    :config
    (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))
#+END_SRC

Define a function to enable =visual-fill-column= and center the text
on the screen. This is mostly useful for editing Markdown files that
don't have hard newlines.

#+BEGIN_SRC emacs-lisp
  (defun s3thi--center-and-fill ()
    (interactive)
    (if (and (boundp 'visual-fill-column-mode) visual-fill-column-mode)
        (progn
          (setq visual-fill-column-center-text nil)
          (visual-fill-column-mode 0))
      (progn
        (setq visual-fill-column-center-text t)
        (visual-fill-column-mode))))
#+END_SRC

Snippets using =yasnippet=.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand))
#+END_SRC

Define a type scale. This is useful for making =org-mode= and Markdown
files pretty, but it really only works out for Markdown. I don't want
differently sized headlines in =org-mode= because sometimes they are
tasks or database entries, not just plain text.

#+BEGIN_SRC emacs-lisp
  (defvar s3thi--type-scale-document-title 1.276)
  (defvar s3thi--type-scale-level-1 1.216)
  (defvar s3thi--type-scale-level-2 1.296)
  (defvar s3thi--type-scale-level-3 1.157)
  (defvar s3thi--type-scale-level-4 1.1025)
  (defvar s3thi--type-scale-level-5 1.05)
  (defvar s3thi--type-scale-level-6 1)
#+END_SRC

Define line spacing that we'll use later, and a function we can use for
hooks.

#+BEGIN_SRC emacs-lisp
  (defvar s3thi--prose-line-spacing 0.125)

  (defun s3thi--set-prose-line-spacing ()
    (setq line-spacing s3thi--prose-line-spacing))
#+END_SRC

Sometimes it's useful to "unfill" paragraphs.

#+BEGIN_SRC emacs-lisp
  (use-package unfill
    :ensure t)
#+END_SRC

** Spell checking

Use =aspell= instead of the default =ispell=. It's better, faster,
supports enabling multiple dictionaries at once, and ships with a
bunch of dictionaries by default (unlike =hunspell=).

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell")
  (setq ispell-dictionary "en_US")
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . flyspell-mode)
           (org-mode . s3thi--set-prose-line-spacing)
           (org-mode . auto-fill-mode))
    :init
    (setq org-directory "~/org/")
    (setq org-startup-indented t)
    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
    (setq org-yank-adjusted-subtrees t)
    (setq org-catch-invisible-edits 'error))
#+END_SRC

Optional type scale settings. Not used currently.

#+BEGIN_SRC emacs-lisp :tangle no
  (set-face-attribute 'org-document-title nil :height s3thi--type-scale-document-title)
  (set-face-attribute 'org-level-1 nil :height s3thi--type-scale-level-1)
  (set-face-attribute 'org-level-2 nil :height s3thi--type-scale-level-2)
  (set-face-attribute 'org-level-3 nil :height s3thi--type-scale-level-3)
  (set-face-attribute 'org-level-4 nil :height s3thi--type-scale-level-4)
  (set-face-attribute 'org-level-5 nil :height s3thi--type-scale-level-5)
  (set-face-attribute 'org-level-6 nil :height s3thi--type-scale-level-6)
#+END_SRC

* Markdown

Set nice header sizes and line spacing for Markdown documents.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :hook ((markdown-mode . s3thi--set-prose-line-spacing))
    :config
    (set-face-attribute 'markdown-header-face-1 nil :height s3thi--type-scale-level-1)
    (set-face-attribute 'markdown-header-face-2 nil :height s3thi--type-scale-level-2)
    (set-face-attribute 'markdown-header-face-3 nil :height s3thi--type-scale-level-3)
    (set-face-attribute 'markdown-header-face-4 nil :height s3thi--type-scale-level-4)
    (set-face-attribute 'markdown-header-face-5 nil :height s3thi--type-scale-level-5)
    (set-face-attribute 'markdown-header-face-6 nil :height s3thi--type-scale-level-6))
#+END_SRC

* Version Control

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

* Programming

** Raku

This is the official Emacs mode for Raku.

#+BEGIN_SRC emacs-lisp
  (use-package raku-mode
    :ensure t)
#+END_SRC

* Additional Key Bindings

Disable C-z to suspend in GUI Emacs. By default, hitting C-z in GUI
Emacs will minimize the editor, which is very annoying. This disables
that behavior. On terminal Emacs, this will still allow us to suspend
the editor and go back to our shell.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-unset-key (kbd "C-z")))
#+END_SRC

Convenient for editing this configuration file.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i") (lambda ()
                                  (interactive)
                                  (find-file "~/.emacs.d/README.org")))
#+END_SRC

* Miscellaneous

=crux= contains a ton of useful Emacs Lisp functions that I'd have to
write myself otherwise.

#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t
    :bind (("C-c d" . #'crux-duplicate-current-line-or-region)))
#+END_SRC

Start the Emacs server.

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

* That's All, Folks!

#+BEGIN_SRC emacs-lisp
  ;;; README.el ends here.
#+END_SRC
