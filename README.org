* Emacs Configuration

** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ankur Sethi"
        user-mail-address "contact@ankursethi.in")
#+END_SRC

** Platform Specific Variables

#+BEGIN_SRC emacs-lisp
  (defvar s3thi/is-a-mac (eq system-type 'darwin))
#+END_SRC

** User Interface

Remove UI elements we don't like.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)

  (setq ring-bell-function 'ignore)
#+END_SRC

And add UI elements that are nice to have.

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (show-paren-mode)

  (setq confirm-kill-emacs #'yes-or-no-p)

  (winner-mode 1)
#+END_SRC

Set a nice font. The font size will have to be different across platforms, so we
check the OS we're runniong on before setting it.

#+BEGIN_SRC emacs-lisp
  (when s3thi/is-a-mac
    (set-frame-font "Fira Code 14" nil t))
#+END_SRC

** Files and Directories

Store configuration created by custom in a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+END_SRC

Don't create garbage files.

#+BEGIN_SRC emacs-lisp
  (setq-default create-lockfiles nil)
  (setq-default make-backup-files nil)
#+END_SRC

Turn on auto-revert-mode for all files. This will automatically reload files
from disk every time they're changed by another from from outside Emacs.

Also ensure that Dired buffers are reloaded on each visit, and that version
control information is checked periodically to ensure that we're showing the
correct VCS information in our modeline.

#+BEGIN_SRC emacs-lisp
  (setq dired-auto-revert-buffer t)
  (setq auto-revert-check-vc-info t)
  (global-auto-revert-mode 1)
#+END_SRC


** Text Editing

Enable useful text editing commands that are disabled by default.

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'scroll-left 'disabled nil)
#+END_SRC

Make sure sentences end with single spaces, not double spaces. This makes
functions that operate on prose behave better (such as those in org-mode and
markdown-mode).

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

Fill paragraphs so the lines are 80 characters wide. Affects all modes.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC

Always use spaces for indentation. Affects all modes, unless we override it
later. The only programming language I've used that mandates the use of tabs
rather than spaces is Go, so it's safe to set this here and override it for Go
if I ever write it again.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

In modes where we are forced to use tabs, set the tab width to 4.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

If there is some text already present in the system clipboard when we run an
Emacs command that kills text, make sure that is preserved by pushing it into
the kill ring.

Since we've configured Emacs to put text into the system clipboard -- in
addition to the kill ring -- when we kill it, this setting ensures that we never
lose whatever might have already been in the clipboard when we perform a kill
operation. Not always useful, but a nice to have.

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

Make word movement commands take CamelCase words into account. Also make sure we
diminish this, otherwise it shows up as an irritating little comma in the
modeline.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'subword
    (diminish 'subword-mode))
  (global-subword-mode 1)
#+END_SRC

** Programming

*** General Programming

*** JavaScript

** Key Bindings

Disable C-z to suspend in GUI Emacs. By default, hitting C-z in GUI Emacs will
minimize the editor, which is very annoying. This disables that behavior. On
terminal Emacs, this will still allow us to suspend the editor and go back to
our shell.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-unset-key (kbd "C-z")))
#+END_SRC

** Everything Else

#+BEGIN_SRC emacs-lisp
  ;; Don't make the screen jump when scroll off the top/bottom of the buffer.
  ;; TODO figure out why/how this setting works.
  (setq scroll-conservatively 100)

  ;; Some general keybindings.
  (global-set-key (kbd "C-x C-b") #'ibuffer)
  (global-set-key (kbd "M-;") #'comment-line)
  (global-set-key (kbd "M-o") #'other-window)
  (global-set-key (kbd "<f12>") #'bookmark-bmenu-list)
  (global-set-key (kbd "C-<f12>") #'bookmark-set)

  ;; Configure exec-path.
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    (exec-path-from-shell-copy-env "WORKON_HOME"))

  ;; Add node_modules to the exec-path.
  (use-package add-node-modules-path
    :ensure t
    :hook js-mode)

  ;; Hide certain modes from the modeline.
  (use-package diminish
    :ensure t)

  ;; Gruvbox is timeless.
  (use-package gruvbox-theme
    :ensure t)

  ;; And so is Monokai.
  (use-package monokai-theme
    :ensure t
    :config
    (load-theme 'monokai t))

  ;; Use Vertico for minibuffer completions.
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))

  ;; Add annotations in the minibuffer using Marginalia.
  (use-package marginalia
    :ensure t
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  ;; Use Orderless for searching through completions in the minibuffer.
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; I get by with a little help from which-key.
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode 1))

  ;; Magit is dope.
  (use-package magit
    :ensure t)

  ;; Highlight modified lines on the fly.
  (use-package diff-hl
    :ensure t
    :after magit
    :config
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (diff-hl-flydiff-mode)
    (global-diff-hl-mode))

  ;; Use company for autocomplete menus.
  (use-package company
    :ensure t
    :diminish
    :hook
    (after-init . global-company-mode)
    :bind
    (:map company-active-map
          ("C-n" . company-select-next-or-abort)
          ("C-p" . company-select-previous-or-abort))
    :config
    (setq company-idle-delay 0.1)
    (setq company-tooltip-align-annotations t)
    (setq company-selection-wrap-around t)
    (setq company-dabbrev-downcase nil))

  (defun s3thi/prog-mode-hook ()
    "Customizations for 'prog-mode' only."
    (setq truncate-lines t) ;; Turn off soft wrapping.
    (display-line-numbers-mode))

  (add-hook 'prog-mode-hook #'s3thi/prog-mode-hook)

  ;; JavaScript indent level.
  (setq js-indent-level 2)

  ;; Treat all JS as JSX.
  (add-hook 'js-mode-hook #'js-jsx-enable)

  ;; Syntax highlighting for TypeScript.
  (use-package typescript-mode
    :ensure t)

  ;; Autocompletion for JavaScript and TypeScript. LSP doesn't work well for these
  ;; yet.
  (defun setup-tide-mode ()
    "Set up Tide."
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)))

  ;; Lint using flycheck.
  (use-package flycheck
    :ensure t
    :diminish
    :init
    (setq flycheck-indication-mode nil)
    :config
    (global-flycheck-mode))

  ;; Automatically format JS code with prettier.
  (use-package prettier-js
    :diminish
    :ensure t
    :hook ((js-mode . prettier-js-mode)))

  ;; Syntax highlighting for JSON.
  (use-package json-mode
    :ensure t)

  ;; REST client.
  (use-package restclient
    :ensure t)

  ;; LSP config.
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l"))

  ;; Markdown.
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  ;; Ripgrep for searching.
  (use-package rg
    :ensure t
    :config
    (rg-enable-default-bindings))

  ;; Highlight TODO, HACK, etc. keywords.
  (use-package hl-todo
    :ensure t
    :diminish
    :hook ((prog-mode . hl-todo-mode)))

  ;; Easily select text surrounded by certain delimiters.
  (use-package expand-region
    :ensure t
    :bind (("C-=" . #'er/expand-region)))

  ;; Snippets.
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (global-set-key (kbd "C-c y") #'yas-insert-snippet)
    (global-set-key (kbd "C-;") #'yas-expand))

  ;; A ton of useful functions.
  (use-package crux
    :ensure t
    :bind (("C-c d" . #'crux-duplicate-current-line-or-region)
           ("C-c D" . #'crux-delete-file-and-buffer)
           ("C-c r" . #'crux-rename-file-and-buffer)))

  ;; A visual undo tree.
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-history-directory-alist
          `(("." . ,(concat user-emacs-directory "undo-tree/")))))

  ;; Move buffers between windows.
  (use-package buffer-move
    :ensure t)

  ;; Browse kill ring.
  (use-package browse-kill-ring
    :ensure t)

  ;; Start the Emacs server.
  (unless (server-running-p)
    (server-start))
#+END_SRC
