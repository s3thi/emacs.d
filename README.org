* Emacs Configuration

** Paperwork

File header.

#+BEGIN_SRC emacs-lisp
  ;;; README.el --- Literate configuration for Emacs -*- lexical-binding: t -*-

  ;;; Commentary:
  ;; My personal initialization file for Emacs.

  ;;; Code:
#+END_SRC

Set encoding to UTF-8.

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

Personal information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ankur Sethi"
        user-mail-address "contact@ankursethi.in")
#+END_SRC

Platform specific variables.

#+BEGIN_SRC emacs-lisp
  (defvar s3thi/is-a-mac (eq system-type 'darwin))
  (defvar s3thi/is-a-linux (eq system-type 'gnu/linux))
#+END_SRC

** User Interface

*** General UI Enhancements

Remove UI elements we don't like.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

And add UI elements that are nice to have.

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (show-paren-mode)
  (setq confirm-kill-emacs #'yes-or-no-p)
  (winner-mode 1)
#+END_SRC

Set a nice font. The font size will have to be different across platforms, so we
check the OS we're running on before setting it.

#+BEGIN_SRC emacs-lisp
  (when s3thi/is-a-mac
    (set-frame-font "Berkeley Mono 15" nil t))
#+END_SRC

Maximize the Emacs frame on startup. To start every new frame maximized instead
of just the first frame, you can add the following options to
=default-frame-alist= instead of =initial-frame-alist=. Additionally, it's
possible to toggle the maximized status of an Emacs frame by calling
=toggle-frame-maximized=, which is bound to =M-<f10>= by default.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

=scroll-conservatively= specifies the number of lines to scroll the buffer in
order to bring the cursor back on the screen when it moves off-screen. If moving
that much doesn't bring the cursor back, Emacs will scroll the buffer by as many
lines as it takes to bring the cursor to the exact center of the screen.

This behavior is irritating and jarring, causing huge jumps as you move around a
file. Luckily, setting this variable to a number larger than 100 tells Emacs to
/never/ scroll by large amounts, and instead scroll the screen /just enough/ to
keep the cursor visible.

In summary, setting =scroll-conservatively= to 101 will make Emacs behave like
every other text editor on the planet.

#+BEGIN_SRC emacs-lisp
    (setq scroll-conservatively 101)
#+END_SRC

=scroll-margin= specifies the number of lines of margin at the top or bottom of
the window. As soon as the cursor gets closer than this to the top of or bottom
of a window, Emacs will start scrolling.

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 5)
#+END_SRC

Show total number of matches while searching:

#+BEGIN_SRC emacs-lisp
  (setq-default isearch-lazy-count t)
#+END_SRC

*** Minibuffer Completion

#+BEGIN_SRC emacs-lisp
  ;; What will we put here???
#+END_SRC

=which-key= displays helpful suggestions in the minibuffer when you hit the
first part of a long keychord.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode 1))
#+END_SRC

=diminish= prevents the modeline from getting polluted when too many modes are
enabled for a single buffer. This conveniently integrates with use-package.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-org-blocks 'gray-background))

  (load-theme 'modus-operandi t)
#+END_SRC

** Files and Directories

Store configuration created by custom in a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+END_SRC

Don't create garbage files.

#+BEGIN_SRC emacs-lisp
  (setq-default create-lockfiles nil)
  (setq-default make-backup-files nil)
#+END_SRC

Turn on =auto-revert-mode= for all files. This will automatically reload files
from disk every time they're changed by another from from outside Emacs.

Also ensure that Dired buffers are reloaded on each visit, and that version
control information is checked periodically to ensure that we're showing the
correct VCS information in our modeline.

#+BEGIN_SRC emacs-lisp
  (setq dired-auto-revert-buffer t)
  (setq auto-revert-check-vc-info t)
  (global-auto-revert-mode 1)
#+END_SRC

** Text Editing

Enable useful text editing commands that are disabled by default.

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'scroll-left 'disabled nil)
#+END_SRC

Make sure sentences end with single spaces, not double spaces. This makes
functions that operate on prose behave better (such as those in =org-mode= and
=markdown-mode=).

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

Fill paragraphs so the lines are 80 characters wide. Affects all modes.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC

Always use spaces for indentation. Affects all modes, unless we override it
later. The only programming language I've used that mandates the use of tabs
rather than spaces is Go, so it's safe to set this here and override it for Go
if I ever write it again.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

In modes where we are forced to use tabs, set the tab width to 4.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

If there is some text already present in the system clipboard when we run an
Emacs command that kills text, make sure that is preserved by pushing it into
the kill ring.

Since we've configured Emacs to put text into the system clipboard -- in
addition to the kill ring -- when we kill it, this setting ensures that we never
lose whatever might have already been in the clipboard when we perform a kill
operation. Not always useful, but a nice to have.

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

Make word movement commands take CamelCase words into account. Also make sure we
diminish this, otherwise it shows up as an irritating little comma in the
modeline.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'subword
    (diminish 'subword-mode))
  (global-subword-mode 1)
#+END_SRC

Snippets using =yasnippet=.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (global-set-key (kbd "C-c y") #'yas-insert-snippet)
    (global-set-key (kbd "C-;") #'yas-expand))
#+END_SRC

Use =olivetti= to make sure all prose is aligned to the center of the screen.
Useful for writing long-form prose in Markdown, org-mode, etc.

#+BEGIN_SRC emacs-lisp
  (defun s3thi/toggle-writing-environment ()
    (interactive)
    (if (equal olivetti-mode nil)
        (progn
          (olivetti-mode t)
          (text-scale-increase 1))
      (progn
        (olivetti-mode 0)
        (text-scale-decrease 1))))

  (use-package olivetti
    :ensure t
    :init
    (setq olivetti-body-width 64)
    :bind (("C-c o" . #'s3thi/toggle-writing-environment)))
#+END_SRC

** Org Mode

TODO: use these sizes for Markdown headings.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . flyspell-mode))
    :config
    (set-face-attribute 'org-level-1 nil :height 2.0)
    (set-face-attribute 'org-level-2 nil :height 1.7143)
    (set-face-attribute 'org-level-3 nil :height 1.4286)
    (set-face-attribute 'org-level-4 nil :height 1.1429)
    (setq org-startup-indented t))
#+END_SRC

** Version Control

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** Key Bindings

Disable C-z to suspend in GUI Emacs. By default, hitting C-z in GUI Emacs will
minimize the editor, which is very annoying. This disables that behavior. On
terminal Emacs, this will still allow us to suspend the editor and go back to
our shell.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-unset-key (kbd "C-z")))
#+END_SRC

Good ol' ==ibuffer==.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
#+END_SRC

** Everything Else

#+BEGIN_SRC emacs-lisp
  ;; Markdown.
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :hook ((markdown-mode . visual-line-mode)
           (markdown-mode . flyspell-mode))
    :init (setq markdown-command "multimarkdown"))

  ;; Ripgrep for searching.
  (use-package rg
    :ensure t
    :config
    (rg-enable-default-bindings))

  ;; A ton of useful functions.
  (use-package crux
    :ensure t
    :bind (("C-c d" . #'crux-duplicate-current-line-or-region)
           ("C-c D" . #'crux-delete-file-and-buffer)
           ("C-c r" . #'crux-rename-file-and-buffer)))

  ;; A visual undo tree.
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-history-directory-alist
          `(("." . ,(concat user-emacs-directory "undo-tree/")))))

  ;; Browse kill ring.
  (use-package browse-kill-ring
    :ensure t)

  ;; ace-window
  (use-package ace-window
    :ensure t
    :bind (("M-o" . 'ace-window))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background nil)
    (setq aw-scope 'frame))

  ;; Start server.
  (server-start)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; README.el ends here.
#+END_SRC
